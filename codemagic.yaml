workflows:
  # ============================================================
  # Android Staging Build Configuration
  # ============================================================
  android-staging:
    name: Android Staging APK Build
    instance_type: mac_mini_m2
    max_build_duration: 60
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: stagging
          include: true
    environment:
      flutter: fvm
      vars:
        # GitHub Secrets for Android Signing
        # ANDROID_SIGNING_KEY: Base64-encoded keystore file (.jks)
        ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
        # Text values - no encoding needed
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/Library/Caches/Cocoapods
        - $CM_BUILD_DIR/ios/Pods
        - $CM_BUILD_DIR/android/.gradle
    scripts:
      - name: Get Flutter packages
        script: flutter pub get
      - name: Flutter analyze
        script: flutter analyze
      - name: Run unit tests
        script: flutter test
      # Set up Android signing using GitHub secrets
      - name: Set up key.properties
        script: |
          # Create key.properties file with text secrets
          echo "storePassword=$ANDROID_STORE_PASSWORD" > android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties
          
          # Decode the base64 encoded keystore and save it
          echo $ANDROID_SIGNING_KEY | base64 --decode > android/app/key.jks
      - name: Build APK
        script: |
          flutter build apk --release
    artifacts:
      - build/app/outputs/**/*.apk
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - sai.chandra@appliedsyntax.io
        notify:
          success: true
          failure: true

  # ============================================================
  # iOS Staging Build Configuration
  # ============================================================
  ios-staging:
    name: iOS Staging TestFlight Build
    instance_type: mac_mini_m2
    max_build_duration: 60
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: stagging
          include: true
    environment:
      vars:
        APP_STORE_APPLE_ID: 6736638071
        # App Store Connect API credentials (text values - no encoding needed)
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        CERTIFICATE_PRIVATE_KEY: ${{ secrets.IOS_CERTIFICATE_PRIVATE_KEY }}
        # Binary files - must be base64 encoded in GitHub
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      flutter: fvm
      xcode: latest
      cocoapods: default
    scripts:
      # Set up iOS code signing using GitHub secrets
      - name: Set up code signing
        script: |
          # Create temporary keychain
          keychain initialize
          
          # Import certificate to keychain (decode from base64)
          echo $DISTRIBUTION_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CERTIFICATE_PRIVATE_KEY
          
          # Add provisioning profile (decode from base64)
          echo $PROVISIONING_PROFILE | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Get Flutter packages
        script: flutter pub get
      - name: Install CocoaPods
        script: |
          cd ios
          pod install
      - name: Flutter analyze
        script: flutter analyze
      - name: Flutter unit tests
        script: flutter test
      - name: Build IPA for TestFlight
        script: |
          flutter build ipa --release
    artifacts:
      - build/ios/ipa/*.ipa
      - flutter_drive.log
    publishing:
      app_store_connect:
        # Use App Store Connect API credentials from GitHub secrets
        key_id: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
        issuer_id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        submit_to_testflight: true
        submit_to_app_store: false
      email:
        recipients:
          - sai.chandra@appliedsyntax.io
        notify:
          success: true
          failure: true

  # ============================================================
  # Android Production Release Configuration
  # ============================================================
  android-release:
    name: Android Production Release
    instance_type: mac_mini_m2
    max_build_duration: 60
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    environment:
      vars:
        PACKAGE_NAME: "com.marsmarkets.app"
        GOOGLE_PLAY_TRACK: "production"
        # GitHub Secrets for Android Signing
        # ANDROID_SIGNING_KEY: Base64-encoded keystore file (.jks)
        ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
        # Text values - no encoding needed
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        # Google Play credentials from GitHub secrets
        GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_CREDENTIALS }}
      flutter: stable
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      # Set up Android signing using GitHub secrets
      - name: Set up key.properties
        script: |
          # Create key.properties file with text secrets
          echo "storePassword=$ANDROID_STORE_PASSWORD" > android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties
          
          # Decode the base64 encoded keystore and save it
          echo $ANDROID_SIGNING_KEY | base64 --decode > android/app/key.jks
      - name: Get Flutter packages
        script: flutter pub get
      - name: Flutter analyze
        script: flutter analyze
      - name: Run unit tests
        script: flutter test
      - name: Build AAB for Release
        script: |
          flutter build appbundle --release
    artifacts:
      - build/**/outputs/**/*.aab
      - flutter_drive.log
    publishing:
      google_play:
        # Use Google Play credentials from GitHub secrets
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        submit_as_draft: false
      email:
        recipients:
          - sai.chandra@appliedsyntax.io
        notify:
          success: true
          failure: true

  # ============================================================
  # iOS Production Release Configuration
  # ============================================================
  ios-release:
    name: iOS Production Release
    instance_type: mac_mini_m2
    max_build_duration: 60
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    environment:
      vars:
        APP_STORE_APPLE_ID: 6736638071
        # App Store Connect API credentials (text values - no encoding needed)
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        CERTIFICATE_PRIVATE_KEY: ${{ secrets.IOS_CERTIFICATE_PRIVATE_KEY }}
        # Binary files - must be base64 encoded in GitHub
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      flutter: fvm
      xcode: latest
      cocoapods: default
    scripts:
      # Set up iOS code signing using GitHub secrets
      - name: Set up code signing
        script: |
          # Create temporary keychain
          keychain initialize
          
          # Import certificate to keychain (decode from base64)
          echo $DISTRIBUTION_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CERTIFICATE_PRIVATE_KEY
          
          # Add provisioning profile (decode from base64)
          echo $PROVISIONING_PROFILE | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Get Flutter packages
        script: flutter pub get
      - name: Install CocoaPods
        script: |
          cd ios
          pod install
      - name: Flutter analyze
        script: flutter analyze
      - name: Flutter unit tests
        script: flutter test
      - name: Build IPA for App Store
        script: |
          flutter build ipa --release
    artifacts:
      - build/ios/ipa/*.ipa
      - flutter_drive.log
    publishing:
      app_store_connect:
        # Use App Store Connect API credentials from GitHub secrets
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: true
      email:
        recipients:
          - sai.chandra@appliedsyntax.io
        notify:
          success: true
          failure: true